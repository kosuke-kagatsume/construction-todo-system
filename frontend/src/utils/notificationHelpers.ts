import { useNotificationStore, NotificationType, NotificationPriority } from '@/stores/notificationStore';

// ÈÄöÁü•„ÇíÁîüÊàê„Åô„Çã„Éò„É´„Éë„ÉºÈñ¢Êï∞
export const notificationHelpers = {
  // „Çø„Çπ„ÇØÂâ≤„ÇäÂΩì„Å¶ÈÄöÁü•
  taskAssigned: (taskName: string, projectName: string, assignedBy: string) => {
    const { addNotification } = useNotificationStore.getState();
    addNotification({
      type: 'task_assigned',
      priority: 'medium',
      title: 'Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ„ÅåÂâ≤„ÇäÂΩì„Å¶„Çâ„Çå„Åæ„Åó„Åü',
      message: `${assignedBy}„Åï„Çì„Åã„Çâ„Äå${taskName}„Äç„ÅåÂâ≤„ÇäÂΩì„Å¶„Çâ„Çå„Åæ„Åó„Åü`,
      actionUrl: `/projects/${encodeURIComponent(projectName)}`,
      fromUser: {
        id: 'user1',
        name: assignedBy,
        role: 'Âñ∂Ê•≠',
      },
      relatedProject: {
        id: 'proj1',
        name: projectName,
      },
    });
  },

  // „Çø„Çπ„ÇØÊúüÈôêÈÄöÁü•
  taskDeadline: (taskName: string, projectName: string, hoursRemaining: number) => {
    const { addNotification } = useNotificationStore.getState();
    let priority: NotificationPriority = 'low';
    let title = '';
    
    if (hoursRemaining <= 0) {
      priority = 'urgent';
      title = '‚ö†Ô∏è „Çø„Çπ„ÇØ„ÅÆÊúüÈôê„ÅåÈÅé„Åé„Å¶„ÅÑ„Åæ„Åô';
    } else if (hoursRemaining <= 24) {
      priority = 'high';
      title = '‚è∞ „Çø„Çπ„ÇØ„ÅÆÊúüÈôê„ÅåËø´„Å£„Å¶„ÅÑ„Åæ„Åô';
    } else if (hoursRemaining <= 72) {
      priority = 'medium';
      title = '„Çø„Çπ„ÇØ„ÅÆÊúüÈôê„ÅåËøë„Å•„ÅÑ„Å¶„ÅÑ„Åæ„Åô';
    } else {
      priority = 'low';
      title = '„Çø„Çπ„ÇØ„ÅÆÊúüÈôê„É™„Éû„Ç§„É≥„ÉÄ„Éº';
    }
    
    addNotification({
      type: 'task_deadline',
      priority,
      title,
      message: `„Äå${taskName}„Äç„ÅÆÊúüÈôê„Åæ„Åß${hoursRemaining > 0 ? `„ÅÇ„Å®${Math.floor(hoursRemaining)}ÊôÇÈñì` : 'ÊúüÈôêË∂ÖÈÅé'}`,
      actionUrl: `/projects/${encodeURIComponent(projectName)}`,
      relatedProject: {
        id: 'proj1',
        name: projectName,
      },
    });
  },

  // „Çπ„ÉÜ„Éº„Ç∏ÂÆå‰∫ÜÈÄöÁü•
  stageCompleted: (stageName: string, projectName: string, completedBy: string) => {
    const { addNotification } = useNotificationStore.getState();
    addNotification({
      type: 'stage_completed',
      priority: 'low',
      title: '„Çπ„ÉÜ„Éº„Ç∏„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü',
      message: `${completedBy}„Åï„Çì„Åå„Äå${stageName}„Äç„ÇíÂÆå‰∫Ü„Åó„Åæ„Åó„Åü`,
      actionUrl: `/projects/${encodeURIComponent(projectName)}`,
      fromUser: {
        id: 'user1',
        name: completedBy,
        role: 'Â∑•Âãô',
      },
      relatedProject: {
        id: 'proj1',
        name: projectName,
        stage: stageName,
      },
    });
  },

  // „Çπ„ÉÜ„Éº„Ç∏ÈÅÖÂª∂ÈÄöÁü•
  stageDelayed: (stageName: string, projectName: string, delayDays: number, reason?: string) => {
    const { addNotification } = useNotificationStore.getState();
    addNotification({
      type: 'stage_delayed',
      priority: delayDays > 7 ? 'urgent' : 'high',
      title: 'üö® „Çπ„ÉÜ„Éº„Ç∏ÈÅÖÂª∂„ÅåÁô∫Áîü„Åó„Å¶„ÅÑ„Åæ„Åô',
      message: `„Äå${stageName}„Äç„Åå${delayDays}Êó•ÈÅÖÂª∂„Åó„Å¶„ÅÑ„Åæ„Åô${reason ? `ÔºàÁêÜÁî±: ${reason}Ôºâ` : ''}`,
      actionUrl: `/projects/${encodeURIComponent(projectName)}`,
      relatedProject: {
        id: 'proj1',
        name: projectName,
        stage: stageName,
      },
      metadata: {
        delayDays,
        reason,
      },
    });
  },

  // Âºï„ÅçÁ∂ô„ÅéË¶ÅÊ±ÇÈÄöÁü•
  handoffRequest: (fromRole: string, toRole: string, projectName: string, taskCount: number) => {
    const { addNotification } = useNotificationStore.getState();
    addNotification({
      type: 'handoff_request',
      priority: 'high',
      title: 'Âºï„ÅçÁ∂ô„ÅéË¶ÅÊ±Ç„Åå„ÅÇ„Çä„Åæ„Åô',
      message: `${fromRole}„Åã„Çâ${toRole}„Å∏„ÅÆÂºï„ÅçÁ∂ô„ÅéÔºà${taskCount}‰ª∂„ÅÆ„Çø„Çπ„ÇØÔºâ`,
      actionUrl: `/projects/${encodeURIComponent(projectName)}`,
      relatedProject: {
        id: 'proj1',
        name: projectName,
      },
      metadata: {
        fromRole,
        toRole,
        taskCount,
      },
    });
  },

  // Âºï„ÅçÁ∂ô„ÅéÂÆå‰∫ÜÈÄöÁü•
  handoffCompleted: (fromRole: string, toRole: string, projectName: string) => {
    const { addNotification } = useNotificationStore.getState();
    addNotification({
      type: 'handoff_completed',
      priority: 'medium',
      title: 'Âºï„ÅçÁ∂ô„Åé„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü',
      message: `${fromRole}„Åã„Çâ${toRole}„Å∏„ÅÆÂºï„ÅçÁ∂ô„Åé„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü`,
      actionUrl: `/projects/${encodeURIComponent(projectName)}`,
      relatedProject: {
        id: 'proj1',
        name: projectName,
      },
    });
  },

  // „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éû„Ç§„É´„Çπ„Éà„Éº„É≥ÈÄöÁü•
  projectMilestone: (milestoneName: string, projectName: string, daysUntil: number) => {
    const { addNotification } = useNotificationStore.getState();
    addNotification({
      type: 'project_milestone',
      priority: daysUntil <= 7 ? 'high' : 'medium',
      title: 'üéØ ÈáçË¶Å„Éû„Ç§„É´„Çπ„Éà„Éº„É≥„ÅåËøë„Å•„ÅÑ„Å¶„ÅÑ„Åæ„Åô',
      message: `„Äå${milestoneName}„Äç„Åæ„Åß„ÅÇ„Å®${daysUntil}Êó•Ôºà${projectName}Ôºâ`,
      actionUrl: `/projects/${encodeURIComponent(projectName)}`,
      relatedProject: {
        id: 'proj1',
        name: projectName,
      },
      metadata: {
        milestoneName,
        daysUntil,
      },
    });
  },

  // „Éú„Éà„É´„Éç„ÉÉ„ÇØË≠¶ÂëäÈÄöÁü•
  bottleneckAlert: (role: string, taskName: string, impactCount: number, severity: 'medium' | 'high' | 'critical') => {
    const { addNotification } = useNotificationStore.getState();
    const priorityMap = {
      medium: 'high' as NotificationPriority,
      high: 'urgent' as NotificationPriority,
      critical: 'urgent' as NotificationPriority,
    };
    
    addNotification({
      type: 'bottleneck_alert',
      priority: priorityMap[severity],
      title: '‚ö†Ô∏è „Éú„Éà„É´„Éç„ÉÉ„ÇØ„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü',
      message: `${role}„ÅÆ„Äå${taskName}„Äç„Åå${impactCount}‰ª∂„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Å´ÂΩ±Èüø„Åó„Å¶„ÅÑ„Åæ„Åô`,
      actionUrl: '/analytics',
      metadata: {
        role,
        taskName,
        impactCount,
        severity,
      },
    });
  },

  // ÊâøË™çË¶ÅÊ±ÇÈÄöÁü•
  approvalRequired: (itemName: string, requestedBy: string, urgency: 'normal' | 'urgent') => {
    const { addNotification } = useNotificationStore.getState();
    addNotification({
      type: 'approval_required',
      priority: urgency === 'urgent' ? 'urgent' : 'high',
      title: urgency === 'urgent' ? 'üî¥ Á∑äÊÄ•ÊâøË™çË¶ÅÊ±Ç' : 'ÊâøË™ç„ÅåÂøÖË¶Å„Åß„Åô',
      message: `${requestedBy}„Åï„Çì„Åã„Çâ„Äå${itemName}„Äç„ÅÆÊâøË™çË¶ÅÊ±Ç„Åå„ÅÇ„Çä„Åæ„Åô`,
      actionUrl: '/approvals',
      actionLabel: 'ÊâøË™ç„Åô„Çã',
      fromUser: {
        id: 'user1',
        name: requestedBy,
        role: 'Ë®≠Ë®à',
      },
    });
  },

  // „Ç∑„Çπ„ÉÜ„É†Êõ¥Êñ∞ÈÄöÁü•
  systemUpdate: (updateType: 'feature' | 'maintenance' | 'bug_fix', description: string) => {
    const { addNotification } = useNotificationStore.getState();
    const titles = {
      feature: '‚ú® Êñ∞Ê©üËÉΩ„ÅåËøΩÂä†„Åï„Çå„Åæ„Åó„Åü',
      maintenance: '„Ç∑„Çπ„ÉÜ„É†„É°„É≥„ÉÜ„Éä„É≥„Çπ„ÅÆ„ÅäÁü•„Çâ„Åõ',
      bug_fix: '‰∏çÂÖ∑Âêà„Åå‰øÆÊ≠£„Åï„Çå„Åæ„Åó„Åü',
    };
    
    addNotification({
      type: 'system_update',
      priority: 'low',
      title: titles[updateType],
      message: description,
      actionUrl: '/updates',
    });
  },

  // „É°„É≥„Ç∑„Éß„É≥ÈÄöÁü•
  mention: (mentionedBy: string, context: string, projectName?: string) => {
    const { addNotification } = useNotificationStore.getState();
    addNotification({
      type: 'mention',
      priority: 'medium',
      title: `@${mentionedBy}„Åï„Çì„Åã„Çâ„É°„É≥„Ç∑„Éß„É≥`,
      message: context,
      actionUrl: projectName ? `/projects/${encodeURIComponent(projectName)}` : '/messages',
      fromUser: {
        id: 'user1',
        name: mentionedBy,
        role: 'IC',
      },
      relatedProject: projectName ? {
        id: 'proj1',
        name: projectName,
      } : undefined,
    });
  },

  // „Ç≥„É°„É≥„ÉàÈÄöÁü•
  comment: (commentBy: string, itemName: string, comment: string, projectName?: string) => {
    const { addNotification } = useNotificationStore.getState();
    addNotification({
      type: 'comment',
      priority: 'low',
      title: 'Êñ∞„Åó„ÅÑ„Ç≥„É°„É≥„Éà',
      message: `${commentBy}„Åï„Çì: ${comment}`,
      actionUrl: projectName ? `/projects/${encodeURIComponent(projectName)}` : '/comments',
      fromUser: {
        id: 'user1',
        name: commentBy,
        role: 'Âñ∂Ê•≠',
      },
      relatedProject: projectName ? {
        id: 'proj1',
        name: projectName,
      } : undefined,
      metadata: {
        itemName,
        comment,
      },
    });
  },
};

// ÂÆöÊúüÁöÑ„Å™ÈÄöÁü•„ÉÅ„Çß„ÉÉ„ÇØÔºàÂÆüÈöõ„ÅÆAPI„Å®ÈÄ£Êê∫„Åô„ÇãÂ†¥Âêà„Å´‰ΩøÁî®Ôºâ
export const startNotificationPolling = (interval: number = 30000) => {
  const checkNotifications = async () => {
    try {
      // API„Åã„ÇâÊñ∞„Åó„ÅÑÈÄöÁü•„ÇíÂèñÂæó
      // const response = await fetch('/api/notifications/unread');
      // const data = await response.json();
      
      // „Éá„É¢Áî®Ôºö„É©„É≥„ÉÄ„É†„Å´ÈÄöÁü•„ÇíÁîüÊàê
      if (Math.random() > 0.8) {
        const demoNotifications = [
          () => notificationHelpers.taskAssigned('Âü∫Á§éÂ∑•‰∫ã„ÉÅ„Çß„ÉÉ„ÇØ', 'Áî∞‰∏≠ÊßòÈÇ∏Êñ∞ÁØâÂ∑•‰∫ã', 'Â±±Áî∞Â§™ÈÉé'),
          () => notificationHelpers.taskDeadline('ÂÆüÊñΩË®≠Ë®àÂõ≥Êõ∏‰ΩúÊàê', '‰ΩêËó§ÊßòÈÇ∏Êñ∞ÁØâÂ∑•‰∫ã', 12),
          () => notificationHelpers.stageDelayed('‰∏äÊ£ü', 'Èà¥Êú®ÊßòÈÇ∏Êñ∞ÁØâÂ∑•‰∫ã', 3, 'Ë≥áÊùêÁ¥çÊúüÈÅÖÂª∂'),
          () => notificationHelpers.handoffRequest('Ë®≠Ë®à', 'IC', 'È´òÊ©ãÊßòÈÇ∏Êñ∞ÁØâÂ∑•‰∫ã', 5),
          () => notificationHelpers.bottleneckAlert('IC', 'ÈÖçÁ∑öË®àÁîª', 4, 'high'),
          () => notificationHelpers.projectMilestone('Âü∫Á§éÁùÄÂ∑•', '‰ºäËó§ÊßòÈÇ∏Êñ∞ÁØâÂ∑•‰∫ã', 3),
        ];
        
        const randomNotification = demoNotifications[Math.floor(Math.random() * demoNotifications.length)];
        randomNotification();
      }
    } catch (error) {
      console.error('Failed to fetch notifications:', error);
    }
  };
  
  // ÂàùÂõûÂÆüË°å
  checkNotifications();
  
  // ÂÆöÊúüÂÆüË°å
  const intervalId = setInterval(checkNotifications, interval);
  
  // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÈñ¢Êï∞„ÇíËøî„Åô
  return () => clearInterval(intervalId);
};

// ÈÄöÁü•Èü≥„ÅÆÂàùÊúüÂåñ
export const initializeNotificationSound = () => {
  // ÈÄöÁü•Èü≥„Éï„Ç°„Ç§„É´„Çí„Éó„É™„É≠„Éº„Éâ
  const audio = new Audio('/notification-sound.mp3');
  audio.volume = 0;
  audio.play().catch(() => {
    // „É¶„Éº„Ç∂„Éº„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„Å™„Åó„Åß„ÅØÂÜçÁîü„Åß„Åç„Å™„ÅÑÂ†¥Âêà„Åå„ÅÇ„Çã
    console.log('Notification sound preload requires user interaction');
  });
};